\documentclass{article}
\usepackage[margin=1.0in]{geometry} % To set margins
\usepackage{amsmath}  % This allows me to use the align functionality.
                      % If you find yourself trying to replicate
                      % something you found online, ensure you're
                      % loading the necessary packages!
\usepackage{amsfonts} % Math font
\usepackage{fancyvrb}
\usepackage{hyperref} % For including hyperlinks
\usepackage[shortlabels]{enumitem}% For enumerated lists with labels specified
                                  % We had to run tlmgr_install("enumitem") in R
\usepackage{float}    % For telling R where to put a table/figure
\usepackage{natbib}        %For the bibliography
\bibliographystyle{apalike}%For the bibliography

\begin{document}
  \begin{enumerate}
  %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
  % Question 1
  %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
    \item Write a \texttt{pois.prob()} function that computes $P(X=x)$, 
    $P(X \neq x)$, $P(X<x)$, $P(X \leq x)$, $P(X > x)$, and $P(X \geq x).$ Enable the user to specify the rate parameter $\lambda$.
<<size="scriptsize">>=

  pois.prob <- function(x, lambda, type= "=="){
  if(type == "=="){
    return(dpois(x, lambda))
  }else if(type == "!="){
    return(1-dpois(x, lambda))
  }else if(type == "<"){
    return(ppois(x-1, lambda))
  }else if(type == "<="){
    return(ppois(x, lambda))
  }else if(type == ">"){
    return(1-ppois(x, lambda))
  }else if(type == ">="){
    return(1-ppois(x-1, lambda))
  }
}
@
Since the Poisson Distribution is a discrete distribution we use the \verb|ppois()| function for the CDF and \verb|dpois()| for the PDF. We use a combination of the CDF and PDF to compute each case. 

  %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
  % Question 2
  %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
    \item Write a \texttt{beta.prob()} function that computes $P(X=x)$, 
    $P(X \neq x)$, $P(X<x)$, $P(X \leq x)$, $P(X > x)$, and $P(X \geq x)$
    for a beta distribution. Enable the user to specify the shape parameters
    $\alpha$ and $\beta$.
<<size="scriptsize">>=
beta.prob <- function(x, alpha, beta, type= "=="){
  if(type == "=="){
    return(0)
  }else if(type == "!="){
    return(1)
  }else if(type == "<"){
    return(pbeta(x, alpha, beta))
  }else if(type == "<="){
    return(pbeta(x, alpha, beta))
  }else if(type == ">"){
    return(1-pbeta(x, alpha, beta))
  }else if(type == ">="){
    return(1-pbeta(x, alpha, beta))
  }
}
@
Since the Beta Distribution is a continuous distribution we use the \verb|pbeta()| function for the CDF. We could also use the \verb|debta()| function, however, I did not find this necessary for computing the probabilities for each of these cases as using the CDF works just fine. 

\end{enumerate}
\bibliography{bibliography}
\end{document}
